;Response file assist tool for Borland Turbo* commands.
;
;  Copyright 2020 Akinori Furuta<afuruta@m7.dion.ne.jp>.
;  All rights reserved.
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;
;  1. Redistributions of source code must retain the above copyright notice,
;     this list of conditions and the following disclaimer.
;
;  2. Redistributions in binary form must reproduce the above copyright notice,
;     this list of conditions and the following disclaimer in the documentation
;     and/or other materials provided with the distribution.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
;  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	.MODEL	TINY

;PSP SEGMENT
CMD_LEN = 080H
CMD_STR = 081H
CMD_END = 0FFH
;PSP ENDS

STD_IN = 0
STD_OUT = 1
STD_ERR = 2

CHR_BELL =	007H
CHR_BS =	008H
CHR_TAB =	009H
CHR_LF =	00AH
CHR_VT =	00BH
CHR_FF =	00CH
CHR_CR =	00DH
CHR_ESC =	01BH

EXIT_CODE_SUCCESS = 	000H
EXIT_CODE_FIX_CMDL =	001H
EXIT_CODE_ERROR =	002H

	.DATA
help			DB	'Response file assist tool for Borland Turbo* commands.', CHR_CR, CHR_LF
			DB	'command line: [/r str] [/t str] [file_name]...', CHR_CR, CHR_LF
			DB	'/r str  set prefix string, /r \0 ', CHR_CR, CHR_LF
			DB	'/t str  set postfix string', CHR_CR, CHR_LF
			DB	'file_name to add prefix and postfix'
cr_lf			DB	CHR_CR, CHR_LF
help_len =		OFFSET $ - OFFSET help

not_enough_memory	DB	'Not enough memory.', CHR_CR, CHR_LF
not_enough_memory_len = OFFSET $ - OFFSET not_enough_memory

can_not_write_std_out	DB	'Can not write stdout. ', CHR_CR, CHR_LF
can_not_write_std_out_len = OFFSET $ - OFFSET can_not_write_std_out

err_code_is		DB	'Error='
err_code_is_len = OFFSET $ - OFFSET err_code_is

option_incomplete	DB	'Incomplete option.', CHR_CR, CHR_LF
option_incomplete_len = OFFSET $ - OFFSET option_incomplete

unknown_option		DB	'Unknown option /'
unknown_option_c	DB	00
			DB	CHR_CR, CHR_LF
unknown_option_len = OFFSET $ - OFFSET unknown_option

exit_code	DB	EXIT_CODE_SUCCESS

	.DATA?
err_code_num	DB	6 dup (?)
prefix		DB	80h dup (?)
postfix		DB	80h dup (?)

stack_top	DB	400h dup (?)
stack_bottom:

	.DATA
prefix_len	DW	0
postfix_len	DW	0

	.CODE
	ORG	100h
START:	;SHOULD not JUMP here again.
	NOP
	CMP	SP, OFFSET stack_bottom
	JB	STACK_LOW
	CLI
	MOV	AX, CS
	MOV	DS, AX
	MOV	ES, AX
	MOV	SS, AX
	MOV	SP, OFFSET stack_bottom
	STI
	CLD
	XOR	AH, AH
	MOV	AL, [DS:CMD_LEN]
	MOV	BX, CMD_STR
	ADD	BX, AX
	CMP	BX, CMD_END
	JBE	CMDL_TERM
	MOV	BX, CMD_END + 1
CMDL_TERM:
	MOV	[BX], AH
	CALL	CMDL_PARSE

EXIT_PROG:
	MOV	AL, [exit_code]
	MOV	AH, 4CH
	INT	21H
	HLT
	JMP	EXIT_PROG

STACK_LOW:
	MOV	CX, not_enough_memory_len
	MOV	DX, OFFSET not_enough_memory
	CALL	PUTS_STD_ERR
	MOV	[exit_code], EXIT_CODE_ERROR
	JMP	EXIT_PROG

PUTS_STD_ERR	PROC
	TEST	CX, CX
	JZ	PUTS_STD_ERR_EXIT
	PUSH	AX
	PUSH	BX
	PUSH	SI
	PUSH	DI
	MOV	BX, STD_ERR
	MOV	AH, 40H
	INT	21H
	POP	DI
	POP	SI
	POP	BX
	POP	AX
PUTS_STD_ERR_EXIT:
	RET
PUTS_STD_ERR	ENDP

PUTS_STD_OUT	PROC
	TEST	CX, CX
	JZ	PUTS_STD_OUT_EXIT
	PUSH	AX
	PUSH	BX
	PUSH	SI
	PUSH	DI
	MOV	BX, STD_OUT
	MOV	AH, 40H
	INT	21H
	POP	DI
	POP	SI
	POP	BX
	POP	AX
PUTS_STD_OUT_EXIT:
	RET
PUTS_STD_OUT	ENDP

STRNUM10	PROC
	PUSH	CX
	PUSH	DX
	PUSHF
	CLD
	MOV	CX, 10
	CALL	STRNUM10_RECUR
	POPF
	POP	DX
	POP	CX
	RET

STRNUM10_RECUR:
	XOR	DX, DX
	DIV	CX
	TEST	AX, AX
	JZ	STRNUM10_E
	PUSH	DX
	CALL	STRNUM10_RECUR
	POP	DX
STRNUM10_E:
	ADD	DL, '0'
	STOSB
	RET
STRNUM10	ENDP

TOUPPER	PROC
	CMP	AL, 'a'
	JB	TOUPPER_E
	CMP	AL, 'z'
	JA	TOUPPER_E
	SUB	AL, 'a' - 'A'
TOUPPER_E:
	RET
TOUPPER	ENDP

TODIGIT	PROC
	CMP	AL, '0'
	JB	TODIGIT_ERR
	CMP	AL, '9'
	JA	TODIGIT_A
	SUB	AL, '0'
	RET

TODIGIT_A:
	CMP	AL, 'A'
	JB	TODIGIT_ERR
	CMP	AL, 'Z'
	JA	TODIGIT_SMALL_A
	SUB	AL, 'A' - 10
	RET

TODIGIT_SMALL_A:
	CMP	AL, 'a'
	JB	TODIGIT_ERR
	CMP	AL, 'z'
	JA	TODIGIT_SMALL_A
	SUB	AL, 'a' - 10
	RET

TODIGIT_ERR:
	MOV	AL, 0FFH
	RET
TODIGIT	ENDP

CMDL_PARSE	PROC
	MOV	BX, CMD_STR
CMDL_PARSE_L1:
	CALL	CMDL_SKIP_SPACE
	JNC	CMDL_IS_OPTION
	RET

CMDL_IS_OPTION:
	MOV	AL, [BX]
	CMP	AL, '/'
	JZ	CMDL_OPTION
	CMP	AL, '-'
	JZ	CMDL_OPTION

CMDL_PATH:
	MOV	CX, [prefix_len]
	MOV	DX, OFFSET prefix
	CALL	PUTS_STD_OUT
	JB	CMDL_PATH_ERR
	PUSH	BX
CMD_PATH_L1:
	MOV	AL, [BX]
	CMP	AL, ' '
	JBE	CMD_PATH_J1
	INC	BX
	CMP	BX, CMD_END
	JBE	CMD_PATH_L1
CMD_PATH_J1:
	POP	CX
	MOV	DX, CX
	NEG	CX
	ADD	CX, BX
	CALL	PUTS_STD_OUT
	JB	CMDL_PATH_ERR
	MOV	CX, [postfix_len]
	MOV	DX, OFFSET postfix
	CALL	PUTS_STD_OUT
	JB	CMDL_PATH_ERR
	JMP	CMDL_PARSE_L1

CMDL_PATH_ERR:
	PUSH	AX
	MOV	CX, can_not_write_std_out_len
	MOV	DX, OFFSET can_not_write_std_out
	CALL	PUTS_STD_ERR
	MOV	CX, err_code_is_len
	MOV	DX, OFFSET err_code_is
	CALL	PUTS_STD_ERR
	POP	AX
	MOV	DI, OFFSET err_code_num
	CALL	STRNUM10
	MOV	CX, DI
	MOV	DX, OFFSET err_code_num
	SUB	CX, DX
	CALL	PUTS_STD_ERR
	MOV	[exit_code], EXIT_CODE_ERROR
	RET

CMDL_OPTION:
	INC	BX
	CMP	BX, CMD_END
	JB	CMDL_OPTION_WHAT

CMDL_OPTION_INCOMPLETE:
	MOV	CX, option_incomplete_len
	MOV	DX, OFFSET option_incomplete
	CALL	PUTS_STD_ERR
	MOV	[exit_code], EXIT_CODE_FIX_CMDL
	RET

CMDL_OPTION_WHAT:
	MOV	AL, [BX]
	CALL	TOUPPER
	CMP	AL, 'R'
	JZ	CMDL_PRE_FIX
	CMP	AL, 'T'
	JZ	CMDL_POST_FIX
	CMP	AL, 'H'
	JZ	CMDL_HELP
	CMP	AL, '?'
	JZ	CMDL_HELP
	MOV	[unknown_option_c], AL
	MOV	CX, unknown_option_len
	MOV	DX, OFFSET unknown_option
	CALL	PUTS_STD_ERR
CMDL_HELP:
	MOV	CX, help_len
	MOV	DX, OFFSET help
	CALL	PUTS_STD_ERR
	MOV	[exit_code], EXIT_CODE_FIX_CMDL
CMDL_PARSE_E:
	RET

CMDL_PRE_FIX:
	INC	BX
	CALL	CMDL_SKIP_SPACE
	JC	CMDL_PARSE_E
	MOV	DI, OFFSET prefix
	CALL	CMDL_ESCAPED_STR
	SUB	DI, OFFSET prefix
	MOV	[prefix_len], DI
	JMP	CMDL_PARSE_L1

CMDL_POST_FIX:
	INC	BX
	CALL	CMDL_SKIP_SPACE
	JC	CMDL_PARSE_E
	MOV	DI, OFFSET postfix
	CALL	CMDL_ESCAPED_STR
	SUB	DI, OFFSET postfix
	MOV	[postfix_len], DI
	JMP	CMDL_PARSE_L1
CMDL_PARSE	ENDP

CMDL_SKIP_SPACE_FUNC	PROC
CMDL_SKIP_SPACE_L1:
	INC	BX
	CMP	BX, CMD_END
	JA	CMDL_SKIP_SPACE_EOL
CMDL_SKIP_SPACE:
	MOV	AL, [BX]
	TEST	AL, AL
	JZ	CMDL_SKIP_SPACE_EOL
	CMP	AL, CHR_CR
	JZ	CMDL_SKIP_SPACE_EOL
	CMP	AL, CHR_LF
	JZ	CMDL_SKIP_SPACE_EOL
	CMP	AL, ' '
	JBE	CMDL_SKIP_SPACE_L1
	CLC	;Continue parse command line
	RET

CMDL_SKIP_SPACE_EOL:
	STC	;Done parse command line
	RET
CMDL_SKIP_SPACE_FUNC	ENDP

CMDL_ESCAPED_STR	PROC
	PUSHF
	CLD
CMDL_ESCAPED_STR_L1:
	CMP	BX, CMD_END
	JA	CMDL_ESCAPED_STR_E
	MOV	AL, [BX]
	CMP	AL, ' '
	JBE	CMDL_ESCAPED_STR_E
	CMP	AL, '\'
	JNZ	CMDL_ESCAPED_STR_NEW_CHAR_NEXT
	INC	BX
	CMP	BX, CMD_END
	JA	CMDL_ESCAPED_STR_E
	MOV	AL, [BX]
	TEST	AL, AL
	JZ	CMDL_ESCAPED_STR_E
	CMP	AL, '\'
	JZ	CMDL_ESCAPED_STR_NEW_CHAR_NEXT
	CMP	AL, '0'
	JB	CMDL_ESCAPED_STR_NEW_CHAR_NEXT
	CMP	AL, 'z'
	JBE	CMDL_ESCAPED_STR_OCT

CMDL_ESCAPED_STR_NEW_CHAR_NEXT:
	INC	BX
CMDL_ESCAPED_STR_NEW_CHAR:
	STOSB
	JMP	SHORT CMDL_ESCAPED_STR_L1

CMDL_ESCAPED_STR_E:
	POPF
	RET

CMDL_ESCAPED_STR_OCT:
	CALL	TODIGIT
	CMP	AL, 7
	JA	CMDL_ESCAPED_STR_UPPER
	XOR	AH, AH
	MOV	CH, 3
CMDL_ESCAPED_STR_OCT_L1:
	SHL	AH, 1
	SHL	AH, 1
	SHL	AH, 1
	ADD	AH, AL
	INC	BX
	CMP	BX, CMD_END
	JA	CMDL_ESCAPED_STR_OCT_STOP
	DEC	CH
	JZ	CMDL_ESCAPED_STR_OCT_STOP
	MOV	AL, [BX]
	CALL	TODIGIT
	CMP	AL, 7
	JBE	CMDL_ESCAPED_STR_OCT_L1

CMDL_ESCAPED_STR_OCT_STOP:
	MOV	AL, AH
	JMP	SHORT CMDL_ESCAPED_STR_NEW_CHAR

CMDL_ESCAPED_STR_UPPER:
	MOV	AL, [BX]
	CALL	TOUPPER

CMDL_ESCAPED_STR_BELL:
	CMP	AL, 'A'
	JNZ	CMDL_ESCAPED_STR_BS
	MOV	AL, CHR_BELL
	JMP	SHORT CMDL_ESCAPED_STR_NEW_CHAR_NEXT

CMDL_ESCAPED_STR_BS:
	CMP	AL, 'B'
	JNZ	CMDL_ESCAPED_STR_ESC
	MOV	AL, CHR_BS
	JMP	SHORT CMDL_ESCAPED_STR_NEW_CHAR_NEXT

CMDL_ESCAPED_STR_ESC:
	CMP	AL, 'E'
	JNZ	CMDL_ESCAPED_STR_FF
	MOV	AL, CHR_ESC
	JMP	SHORT CMDL_ESCAPED_STR_NEW_CHAR_NEXT

CMDL_ESCAPED_STR_FF:
	CMP	AL, 'F'
	JNZ	CMDL_ESCAPED_STR_LF
	MOV	AL, CHR_FF
	JMP	SHORT CMDL_ESCAPED_STR_NEW_CHAR_NEXT

CMDL_ESCAPED_STR_LF:
	CMP	AL, 'N'
	JNZ	CMDL_ESCAPED_STR_CR
	MOV	AL, CHR_LF
	JMP	SHORT CMDL_ESCAPED_STR_NEW_CHAR_NEXT

CMDL_ESCAPED_STR_CR:
	CMP	AL, 'R'
	JNZ	CMDL_ESCAPED_STR_TAB
	MOV	AL, CHR_CR
	JMP	SHORT CMDL_ESCAPED_STR_NEW_CHAR_NEXT

CMDL_ESCAPED_STR_TAB:
	CMP	AL, 'T'
	JNZ	CMDL_ESCAPED_STR_VT
	MOV	AL, CHR_TAB
	JMP	SHORT CMDL_ESCAPED_STR_NEW_CHAR_NEXT

CMDL_ESCAPED_STR_VT:
	CMP	AL, 'V'
	JNZ	CMDL_ESCAPED_STR_X
	MOV	AL, CHR_VT
	JMP	SHORT CMDL_ESCAPED_STR_NEW_CHAR_NEXT

CMDL_ESCAPED_STR_X:
	CMP	AL, 'X'
	JZ	CMDL_ESCAPED_STR_X_J1
	MOV	AL, [BX]
	JMP	CMDL_ESCAPED_STR_NEW_CHAR_NEXT

CMDL_ESCAPED_STR_L1A:
	JMP	CMDL_ESCAPED_STR_L1

CMDL_ESCAPED_STR_X_J1:
	INC	BX
	CMP	BX, CMD_END
	JA	CMDL_ESCAPED_STR_L1A
	XOR	AH, AH
	MOV	CH, 2
CMDL_ESCAPED_STR_X_L1:
	MOV	AL, [BX]
	CALL	TODIGIT
	CMP	AL, 0FH
	JA	CMDL_ESCAPED_STR_X_STOP
	SHL	AH, 1
	SHL	AH, 1
	SHL	AH, 1
	SHL	AH, 1
	ADD	AH, AL
	INC	BX
	CMP	BX, CMD_END
	JA	CMDL_ESCAPED_STR_X_STOP
	DEC	CH
	JNZ	SHORT CMDL_ESCAPED_STR_X_L1
CMDL_ESCAPED_STR_X_STOP:
	MOV	AL, AH
	JMP	CMDL_ESCAPED_STR_NEW_CHAR
CMDL_ESCAPED_STR	ENDP

	END	START
